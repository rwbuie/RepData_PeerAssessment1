View(nonastepdatagbd)
test+geom_histogram()+facet_grid(date~.)
test<-ggplot(nonastepdata, aes(x=steps, color=date))
test+geom_histogram()
test+geom_histogram(bin=150)
test+geom_histogram(binwidth = 150)
nonastepdatagbdmean
as.data.frame(nonastepdatagbdmean)
summarize(nonastepdatagbd, median(steps))
media(c(3,5,1,6))
median(c(3,5,1,6))
median(c(3,5,1,6,3))
median(c(3,5,1,6,3,1,1))
median(c(3,5,1,6,3,1,1,1,1,1))
sum(nonastepdatagbd$steps)
median(nonastepdatagbd$steps)
View(nonastepdatagbd)
View(nonastepdatagbd)
View(nonastepdatagbd)
View(nonastepdata)
View(stepdata)
ggplot(nonastepdata, aes(x=interval, y=steps~date))
ggplot(nonastepdata, aes(x=interval, y=steps))
ggplot(nonastepdata, aes(x=interval, y=steps))+geom_line()
View(nonastepdatagbd)
ggplot(nonastepdatagbdmean, aes(x=interval, y=steps))+geom_line()
View(nonastepdatagbdmean)
ggplot(nonastepdatagbdmean, aes(x=interval, y=mean(steps)))+geom_line()
group_by(nonastepdata, interval, date)
group_by(nonastepdata, date, interval)
ggplot(nonastepdata, aes(x=interval, y=steps))+geom_line()
ggplot(nonastepdata, aes(x=interval, y=steps,color=date))+geom_line()
ggplot(nonastepdata, aes(x=interval, y=steps))+geom_line()
test<-group_by(nonastepdata, date, interval)
summarize(test, mean(steps))
ggplot(summarize(test, mean(steps)), aes(x=interval, y=mean(steps)))+geom_line()
ggplot(summarize(test, mean(steps)), aes(x=interval, y='mean(steps)'))+geom_line()
test2<-summarize(test, mean(steps))
rename(test2, mean,mean(steps))
rename(test2, mean=mean(steps))
View(test2)
View(nonastepdata)
rename(test2, replace= c(`mean(steps)`=`mean`))
rename(test2, replace= c(`mean(steps)`=mean))
rename(test2, replace= c(`mean(steps)`=mean)
rename(test2, `mean(steps)`=mean)
rename(test2, mean=`mean(steps)`)
test2<-rename(test2, mean=`mean(steps)`)
View(test2)
group_by(nonastepdata, interval)
test1<-group_by(nonastepdata, interval)
test1<- summarise(test1, mean(steps))
View(test1)
nonastepdatagbi <- group_by(nonastepdata, interval) %>% summarize(mean(steps))
ggplot(test1, aes=(x=interval, y='mean(steps)'))
ggplot(test1, aes=(x=interval, y="mean(steps)"))
test1<- summarise(test1, mean=mean(steps))
test1<-group_by(nonastepdata, interval)
test1<- summarise(test1, mean=mean(steps))
ggplot(test1, aes=(x=interval, y=mean(mean))
ggplot(test1, aes=(x=interval, y=mean))
test1
ggplot(test1, aes(x=interval, y=mean))
ggplot(test1, aes(x=interval, y=mean))+geom_line()
nonastepdatagbimean <- group_by(nonastepdata, interval) %>% summarize(mean=mean(steps))
ggplot
max(nonastepdatagbimean$mean)
which.max(nonastepdatagbimean$mean)
nonastepdatagbimean[which.max(nonastepdatagbimean$mean),]
nonastepdatagbimean <- group_by(nonastepdata, interval) %>% summarize(stepmean=mean(steps))
ggplot(nonastepdatagbimean, aes(x=interval, y=stepmean))+geom_line()
#next, which 5 minute interval has the highest averagte mean...
nonastepdatagbimean[which.max(nonastepdatagbimean),]
nonastepdatagbimean <- group_by(nonastepdata, interval) %>% summarize(stepmean=mean(steps))
ggplot(nonastepdatagbimean, aes(x=interval, y=stepmean))+geom_line()
#next, which 5 minute interval has the highest averagte mean...
nonastepdatagbimean[which.max(nonastepdatagbimean$stepmean),]
nonastepdatagbimean <- group_by(nonastepdata, interval) %>% summarize(stepmean=mean(steps))
ggplot(nonastepdatagbimean, aes(x=interval, y=stepmean))+geom_line()
#next, which 5 minute interval has the highest averagte mean...
nonastepdatagbimean[which.max(nonastepdatagbimean$stepmean),1]
sum(complete.cases(stepdata))
stepdata[!complete.cases(stepdata),]
length( stepdata[!complete.cases(stepdata),])
width( stepdata[!complete.cases(stepdata),])
height( stepdata[!complete.cases(stepdata),])
nrow( stepdata[!complete.cases(stepdata),])
summarize(nonastepdatagbd, sum(steps))
summarize(nonastepdatagbd, sum(steps))
#total steps per day...
nonastepdatagbd<-group_by(nonastepdata,date)
as.data.frame(summarize(nonastepdatagbd, sum(steps)))
#I don't know why they require a historgram of steps per day for each day, it will be pointlessly dense... but here it is.
plot1<-ggplot(nonastepdata, aes(x=steps, color=date))
plot1+geom_histogram(binwidth = 150)
#calculating the mean and median steps per day
nonastepdatagbdmean<- summarize(nonastepdatagbd, mean(steps))
nonastepdatagbdmed<- summarize(nonastepdatagbd, median(steps))
as.data.frame(nonastepdatagbdmean)
as.data.frame(nonastepdatagbdmed)
for(i in nrow(stepfixed)){
i
}
for(i in stepfixed){
i
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
for(i in nrow(stepfixed)){
}
for(i in stepfixed){
i
}
for(i in nrow(stepfixed)){
i
}
for(i in stepfixed$date{
i
}
for(i in stepfixed{
i
}
for(i in stepfixed){
i
}
for(i in stepfixed){
i
}
for(i in stepfixed){
i
i
}
for(i in stepfixed){
i
i+1
}
for(i in stepfixed$steps){
i
i+1
}
for(i in stepfixed$steps){
i
}
for(i in stepfixed$steps){
x<-i
}
for(i in stepfixed$interval){
x<-i
}
x
print
for(i in stepfixed$interval){
print(i)
}
for(i in stepfixed){
print(i)
}
for(i in stepfixed$steps){
print(i)
}
for(i in stepfixed$steps){
stepfixed[i]
}
for(i in stepfixed$steps){
stepfixed[i,]
}
for(i in stepfixed$steps){
print(stepfixed[i,])
}
View(stepdata)
mean(stepdata[,2]==stepdata[stepdata[17567,2]],1)
stepdata[17567,2]
mean(stepdata[,2]==stepdata[stepdata[17567,2]],1)
mean(stepdata[,2]==stepdata[stepdata[17567,2]],)
mean(subset(stepdata,stepdata[stepdata[17567,2]]=="2012-11-30"),)
mean(stepdata[,2]==stepdata[stepdata[17567,2]],)
mean(stepdata[,2]==stepdata[stepdata[17567,2]],1)
mean(stepdata$date==stepdata[stepdata[17567,2]],1)
mean(stepdata==stepdata[stepdata[17567,2]],1)
mean(stepdata$date==stepdata[stepdata[17567,2]],1)
mean(stepdata$date==stepdata[stepdata[17567,2]])
mean(stepdata$date==stepdata[stepdata[17567,2]],)
mean(stepdata$date==stepdata[17567,2]],)
mean(stepdata$data==stepdata[17567,2]],)
mean(stepdata$data==stepdata[17567,2],)
mean(stepdata$data==stepdata[17567,2],1)
mean(nonastepdata$data==nonastepdata[17567,2],1)
mean(nonastepdata[,1])
mean(nonastepdata[,1])
mean(stepdata[,1])
mean(nonastepdata[,1])
mean(nonastepdata[nonastepdata$data==nonastepdata[17567,2],1])
mean(nonastepdata[nonastepdata$date==nonastepdata[17567,2],1])
mean(nonastepdata[nonastepdata$date==nonastepdata[17563,2],1])
mean(nonastepdata[nonastepdata$date==nonastepdata[17563,2],])
mean(nonastepdata[nonastepdata$date==nonastepdata[17563,2]])
subset(nonastepdata, nonastepdata$date=="2012-11-30")
subset(nonastepdata, nonastepdata$date==nonastepdata[17552,1])
subset(nonastepdata, nonastepdata$date==nonastepdata[17552,2])
nonastepdata
subset(nonastepdata, nonastepdata$date==nonastepdata[3909,2])
mean(nonastepdata[nonastepdata$date==nonastepdata[13563,2]])
subset(nonastepdata, nonastepdata$date==nonastepdata[3909,2])
mean(nonastepdata[nonastepdata$date==nonastepdata[13563,2]])
mean(nonastepdata[nonastepdata$date==nonastepdata[17563,2],1])
mean(nonastepdata[nonastepdata$date==nonastepdata[13563,2],1])
for(i in nrow(stepfixed)){
if(stepfixed$steps!=NA, print("hello"))
}
for(i in nrow(stepfixed)){
if(is.na(stepfixed$steps[i,])==TRUE, print("hello"))
}
if(is.na(stepfixed$steps[i,])==TRUE){print("hello")}
if(is.na(stepfixed$steps[1,])==TRUE){print("hello")}
if(is.na(stepfixed$steps[1,1])==TRUE){print("hello")}
if(is.na(stepfixed$steps[1,1])==TRUE)print("hello")
if(is.na(stepfixed[1,1])==TRUE)print("hello")
if(is.na(stepfixed[576,1])==TRUE)print("hello")
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
for(i in nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
stepfixed[i,1]<- mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
View(stepfixed)
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
for(i in nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
stepfixed[i,1]= mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
for(i in nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
stepfixed[i,1]<- mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
View(stepfixed)
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
for(i in nrow(stepfixed)){
print(as.character(i))
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
stepfixed[i,1]<- mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in nrow(stepfixed)){
print(as.character(i))
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
stepfixed[i,1]<- mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
print(as.character(i))
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
stepfixed[i,1]<- mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
}
}
View(stepfixed)
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
print(as.character(i))
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
print(mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1]))
}
}
i=1
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
nonastepdata[nonastepdata$date==stepfixed[i,2],1]
stepfixed[i,2]
nonastepdata[nonastepdata$date==stepfixed[i,2],1]
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
nonastepdata[nonastepdata$date==stepfixed[i,2],1]
nonastepdata[,1]
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
i=4564
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
i=45
mean(nonastepdata[nonastepdata$date==stepfixed[i,2],1])
nonastepdata[nonastepdata$date==stepfixed[i,2],1]
i=5676
nonastepdata[nonastepdata$date==stepfixed[i,2],1]
View(nonastepdata)
View(nonastepdata)
View(stepdata)
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
print(mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1]))
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
stepfixed[i,1]<-mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1])
}
}
View(stepfixed)
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
stepfixed[i,1]<-round(,mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1]),0)
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the day's mean
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
stepfixed[i,1]<-round(mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1]))
}
}
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the interval's mean, rounded to the 1's place
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
stepfixed[i,1]<-round(mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1]))
}
}
#the new data set has been made, and is called stepfixed
#repeat the first calculations using the new data
plot2<-ggplot(stepfixed, aes(x=steps, color=date))
plot2+geom_histogram(binwidth = 150)
#calculating the mean and median steps per day
stepfixeddatagbdmean<- summarize(stepfixed, mean=mean(steps))
stepfixeddatagbdmed<- summarize(stepfixed, mean=median(steps))
as.data.frame(stepfixeddatagbdmean)
as.data.frame(stepfixeddatagbdmed)
?weekdays
?weekdays(stepfixed$date)
weekdays(stepfixed$date)
weekdays(as.date(stepfixed$date))
stepfixed[1,2]
as.Date(stepfixed[1,2])
weekdays(as.Date(stepfixed$date))
test[,4]<-weekdays(as.Date(stepfixed$date))
test<-stepfixed
test[,4]<-weekdays(as.Date(stepfixed$date))
View(test)
weekdays(as.Date(stepfixed[1,2]))
c("test1","test2")weekdays(as.Date(stepfixed[1,2]))
c("test1","test2")[1]
c("test1","test2")[2]
c("test1","test2")[weekdays(as.Date(stepfixed[1,2])) %in% c("Monday")+1L]
c("test1","test2")[weekdays(as.Date(stepfixed[1,2])) %in% c("Monday")]
c("test1","test2")[weekdays(as.Date(stepfixed[1,2])) %in% c("Monday2")+1L]
c("weekday","weekend")[weekdays(as.Date(stepfixed[1,2])) %in% c("Monday")+1L]
c("weekday","weekend")[weekdays(as.Date(stepfixed[1,2])) %in% c("Sunday","Saturday")+1L]
c("weekday","weekend")[weekdays(as.Date(stepfixed[1432,2])) %in% c("Sunday","Saturday")+1L]
c("weekday","weekend")[weekdays(as.Date(stepfixed[,2])) %in% c("Sunday","Saturday")+1L]
stepfixedday<-stepfixed
#this code was inspired by akrun's solution
stepfixedday[,4]<-c("weekday","weekend")[weekdays(as.Date(stepfixed[,2])) %in% c("Sunday","Saturday")+1L]
View(stepfixedday)
library(lattice)
stepfixedday<-stepfixed
#this code was inspired by akrun's solution
stepfixedday[,4]<-c("weekday","weekend")[weekdays(as.Date(stepfixed[,2])) %in% c("Sunday","Saturday")+1L]
#now for the plot
stepfixeddatemean <- group_by(stepfixedday, interval, V4 ) %>% summarize(stepmean=mean(steps))
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean))+geom_line()
# Chunk 1: setup
library(knitr)
library(ggplot2)
library(lattice)
library(dplyr)
opts_chunk$set(echo=TRUE)
# Chunk 2: load and transform
#read our data and save to a df
stepdata<-read.csv(unz("activity.zip","activity.csv"))
#create a df that ignores all NA values
nonastepdata<-stepdata[complete.cases(stepdata),]
# Chunk 3
#total steps per day...
nonastepdatagbd<-group_by(nonastepdata,date)
as.data.frame(summarize(nonastepdatagbd, sum(steps)))
#I don't know why they require a historgram of steps per day for each day, it will be pointlessly dense... but here it is.
plot1<-ggplot(nonastepdata, aes(x=steps, color=date))
plot1+geom_histogram(binwidth = 150)
#calculating the mean and median steps per day
nonastepdatagbdmean<- summarize(nonastepdatagbd, mean(steps))
nonastepdatagbdmed<- summarize(nonastepdatagbd, median(steps))
as.data.frame(nonastepdatagbdmean)
as.data.frame(nonastepdatagbdmed)
# Chunk 4
#first, let's create a chart of average steps per interval
nonastepdatagbimean <- group_by(nonastepdata, interval) %>% summarize(stepmean=mean(steps))
ggplot(nonastepdatagbimean, aes(x=interval, y=stepmean))+geom_line()
#next, which 5 minute interval has the highest averagte mean...
nonastepdatagbimean[which.max(nonastepdatagbimean$stepmean),1]
# Chunk 5
#calculate total number of NA columns from our original set
nrow( stepdata[!complete.cases(stepdata),])
stepfixed<- stepdata
#fill in missing values with the interval's mean, rounded to the 1's place
i=0
for(i in 1:nrow(stepfixed)){
if(is.na(stepfixed[i,1])==TRUE) {
print("fixing")
#stepfixed[i,1]<-
stepfixed[i,1]<-round(mean(nonastepdata[nonastepdata$interval==stepfixed[i,3],1]))
}
}
#the new data set has been made, and is called stepfixed
#repeat the first calculations using the new data
plot2<-ggplot(stepfixed, aes(x=steps, color=date))
plot2+geom_histogram(binwidth = 150)
#calculating the mean and median steps per day
stepfixeddatagbdmean<- summarize(stepfixed, mean=mean(steps))
stepfixeddatagbdmed<- summarize(stepfixed, mean=median(steps))
as.data.frame(stepfixeddatagbdmean)
as.data.frame(stepfixeddatagbdmed)
stepfixeddatemean <- group_by(stepfixedday, interval, V4 ) %>% summarize(stepmean=mean(steps))
stepfixeddatemean
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets=~V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets= .~V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets= V4~))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets= V4~.))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets= ~.V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean))+geom_line(facets=V4)
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets=V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4, facets=V4))+geom_line()
qplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4, facets=V4))
qplot(data=stepfixeddatemean, x=interval, y=stepmean, color=V4, facets=V4)
qplot(data=stepfixeddatemean, x=interval, y=stepmean, color=V4, facets=V4)
View(stepfixeddatemean)
qplot(data=stepfixeddatemean, x=interval, y=stepmean)
qplot(data=stepfixeddatemean, x=interval, y=stepmean, color=V4, facets=V4)
stepfixeddatemean$V4
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4, facets=V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line()+facet(V4)
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line(facet=V4)
qplot(data=stepfixeddatemean, x=interval, y=stepmean, color=V4, facets=~V4)
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4, facets=~V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, facets=~V4))+geom_line()
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4, facets=~V4))+geom_line()
qplot(data=stepfixeddatemean, x=interval, y=stepmean, color=V4, facets=~V4)
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line()+facet_wrap(~V4, ncol=2)
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line()+facet_wrap(~V4)
stepfixedday<-stepfixed
#this code was inspired by akrun's solution
stepfixedday[,4]<-c("weekday","weekend")[weekdays(as.Date(stepfixed[,2])) %in% c("Sunday","Saturday")+1L]
#now for the plot
stepfixeddatemean <- group_by(stepfixedday, interval, V4 ) %>% summarize(stepmean=mean(steps))
ggplot(stepfixeddatemean, aes(x=interval, y=stepmean, color=V4))+geom_line()+facet_wrap(~V4)
knit_with_parameters('C:/Users/blackie/OneDrive/Coursework and Study Matterials/Coursera Data Science Specialization/Reproducable Research/week2/RepData_PeerAssessment1/PA1_template.Rmd')
knit_with_parameters('C:/Users/blackie/OneDrive/Coursework and Study Matterials/Coursera Data Science Specialization/Reproducable Research/week2/RepData_PeerAssessment1/PA1_template.Rmd')
